<?php

namespace SSql;

require_once dirname(dirname(__FILE__)) . "/src/SSql.php";

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-30 at 07:47:07.
 */
class SSqlPgsqlTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var SSql
	 */
	protected $ssql;

	/**
	 * @var type 
	 */
	private $config = array('database' 
			=> array('driver' => 'Postgres'
					, 'dsn' => PGSQL_DSN
					, 'user' => PGSQL_USER
					, 'password' => PGSQL_PASSWORD
                    , 'schema' => PGSQL_SCHEMA)
			, 'sqlDir' => './sql/');

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 * @group pgsql
	 */
	public static function setUpBeforeClass() {
		$pdo = new \PDO(PGSQL_DSN, PGSQL_USER, PGSQL_PASSWORD);
        $pdo->exec('SET search_path TO ' . PGSQL_SCHEMA);
		$r = $pdo->exec('drop table ' . PGSQL_SCHEMA . '.user');
		$create = 'CREATE TABLE ' .PGSQL_SCHEMA . '.';
        $create2 = <<<SQL
user (
   id int,
   name varchar(45) NOT NULL
 );
SQL;
        $create = $create . $create2;
		$pdo->exec($create);

		$insert = "insert into " . PGSQL_SCHEMA . ".user values(1, 'sato')";
        $pdo->exec($insert);
        $insert = "insert into " . PGSQL_SCHEMA . ".user values(2, 'suzuki')";
        $pdo->exec($insert);
        $insert = "insert into " . PGSQL_SCHEMA . ".user values(3, 'takahashi')";
        $pdo->exec($insert);
        $insert = "insert into " . PGSQL_SCHEMA . ".user values(4, 'tanaka')";
        $pdo->exec($insert);
        $insert = "insert into " . PGSQL_SCHEMA . ".user values(5, 'ito')";
        $pdo->exec($insert);

	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 * @group pgsql
	 */
	public static function tearDownAfterClass() {
		
	}

	/*
	 * @group pgsql
	 * 
	 */
	protected function setUp() {
		$this->config['sqlDir'] = __DIR__ . "/" . $this->config['sqlDir'];
        $this->ssql = SSql::connect($this->config);
	}
    protected function tearDown() {
        $this->ssql->close();
    }

	/**
	 * @covers SSql\SSql::from
	 * @todo   Implement testFrom().
	 * @group pgsql
	 */
	public function test1() {
        $ssql = $this->ssql;
		$users = $ssql->createSSql()
			->selectList('selectUserPgSql', array('schema' => PGSQL_SCHEMA));
		$this->assertSame(count($users), 5);
	}

	/**
	 * @covers SSql\SSql::from
	 * @todo   Implement testFrom().
	 * @group pgsql
	 */
	public function test2() {
        $ssql = $this->ssql;
		$users = $ssql->createSSql()
					->selectList('selectUserPgSql', array('id' => 3, 'schema' => PGSQL_SCHEMA));
		$this->assertSame($users[0]['name'], 'takahashi');
	}

	/**
	 * 
	 * @group pgsql
	 */
	public function test3() {
        $ssql = $this->ssql;
		$users = $ssql->createSSql()
			->selectList('selectUserPgSql', array('id' => 2, 'schema' => PGSQL_SCHEMA), get_class(new PgsqlUser()));
		$this->assertSame($users[0]->getId(), 2);
		$this->assertSame($users[0]->getName(), 'suzuki');
	}

}

class PgsqlUser {
	private $id;

	private $name;
	public function getId() {
		return $this->id;
	}

	public function setId($id) {
		$this->id = $id;
	}

	public function getName() {
		return $this->name;
	}

	public function setName($name) {
		$this->name = $name;
	}


}
