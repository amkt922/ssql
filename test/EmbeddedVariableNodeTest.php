<?php

namespace SSql\Sql;

require_once dirname(dirname(__FILE__)) . "/src/SSql.php";
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-05 at 10:09:50.
 */
class EmbeddedVariableNodeTest extends \PHPUnit_Framework_TestCase {

    /**
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
  	}

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    public function test1() {
		$sql = "/*IF a != null*/a = /*@a*/1/*END*/";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => 4999);
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame('a = 4999', $testSql);	
   }

   public function test2() {
		$sql = "/*IF a != null*/a = /*@a*/'a'/*END*/";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => 'hoge');
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame('a = \'hoge\'', $testSql);	
   }

   public function test3() {
		$sql = "/*IF a != null*/a in /*@a*/(1, 2)/*END*/";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => array(4999, 5000));
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame('a in (4999,5000)', $testSql);	
   }

   public function test4() {
		$sql = "/*IF a != null*/a in /*@a*/('a', 'b')/*END*/";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => array('hoge', 'foo'));
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame("a in ('hoge','foo')", $testSql);	
   }

   public function test5() {
		$sql = "/*IF a != null*/a in /*@a*/('a', 'b')/*END*/";
		$sql .= "/*IF b != null*/ and b = /*@b*/1/*END*/";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => array('hoge', 'foo')
						, 'b' => 1000);
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame("a in ('hoge','foo') and b = 1000", $testSql);	
   }

   public function test6() {
		$sql = "from /*@@a*/.tableName";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => 'hoge');
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame("from hoge.tableName", $testSql);	
   }

   public function test7() {
		$sql = "from /*@.a*/dev.tableName";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => 'hoge');
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame("from hoge.tableName", $testSql);	
   }

   public function test8() {
		$sql = "from /*@@a*/dev.tableName";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => 'hoge');
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame("from hogedev.tableName", $testSql);	
   }

   public function test9() {
		$sql = "order by hoge /*@a*/asc";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => 'desc');
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame("order by hoge desc", $testSql);	
   }

   public function test10() {
		$sql = "limit /*@a*/10, /*@b*/100";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => 100, 'b' => 1000);
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame("limit 100, 1000", $testSql);	
   }


}

