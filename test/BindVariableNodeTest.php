<?php

namespace SSql\Sql;

require_once dirname(dirname(__FILE__)) . "/src/SSql.php";
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-05 at 10:09:50.
 */
class BindVariableNodeTest extends \PHPUnit_Framework_TestCase {

    /**
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
  	}

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
  
   public function test1() {
		$sql = "/*IF a != null*/a = /*a*/1/*END*/";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => 4999);
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame('a = ?', $testSql);	
		$bindVariables = $context->getBindVariables();
		print_r($bindVariables);
		$this->assertSame(4999, $bindVariables[0]);	
   }

   public function test2() {
		$sql = "/*IF a != null*/a = /*a*/'a'/*END*/";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => 'hoge');
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame('a = ?', $testSql);	
		$bindVariables = $context->getBindVariables();
		print_r($bindVariables);
		$this->assertSame('hoge', $bindVariables[0]);	
   }

   public function test3() {
		$sql = "/*IF a != null*/a in /*a*/(1, 2)/*END*/";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => array(4999, 5000));
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame('a in (?,?)', $testSql);	
		$bindVariables = $context->getBindVariables();
		print_r($bindVariables);
		$this->assertSame(4999, $bindVariables[0]);	
		$this->assertSame(5000, $bindVariables[1]);	
   }

   public function test4() {
		$sql = "/*IF a != null*/a in /*a*/('a', 'b')/*END*/";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => array('hoge', 'foo'));
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame('a in (?,?)', $testSql);	
		$bindVariables = $context->getBindVariables();
		print_r($bindVariables);
		$this->assertSame('hoge', $bindVariables[0]);	
		$this->assertSame('foo', $bindVariables[1]);	
   }

   public function test5() {
		$sql = "/*IF a != null*/a in /*a*/('a', 'b')/*END*/";
		$sql .= "/*IF b != null*/ and b = /*b*/1/*END*/";
		$an = new SqlAnalyzer($sql);
		$node = $an->analyze();
		$param = array('a' => array('hoge', 'foo')
						, 'b' => 1000);
		$context = Context\CommandContext::createCommandContext($param);
		$node->acceptContext($context);
		echo $testSql = $context->getSql();
		$this->assertSame('a in (?,?) and b = ?', $testSql);	
		$bindVariables = $context->getBindVariables();
		print_r($bindVariables);
		$this->assertSame('hoge', $bindVariables[0]);	
		$this->assertSame('foo', $bindVariables[1]);	
		$this->assertSame(1000, $bindVariables[2]);	
   }


}

