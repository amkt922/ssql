<?php

namespace SSql;

require_once dirname(dirname(__FILE__)) . "/src/SSql.php";

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-08-14 at 09:20:14.
 */
class SQueryManagerTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var SQueryManager
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new SQueryManager(null);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers SSql\SQueryManager::insert
	 * @todo   Implement testInsert().
	 */
	public function testInsert() {
		$sql = $this->object->insert()
						->into('User', array('id', 'name'))
						->values(array(array('id' => 1
								, 'name' => 'test')))->getSql();
		$this->assertSame('INSERT INTO User (id,name) VALUES (?,?)', $sql);
	}

	public function testInsert2() {
		$sql = $this->object->insert()
						->into('User', array('id', 'name'))
						->values(array(array('id' => 1
											, 'name' => 'test')
										,array('id' => 2
												, 'name' => 'hoge')))->getSql();
		$this->assertSame('INSERT INTO User (id,name) VALUES (?,?) (?,?)', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::delete
	 * @todo   Implement testDelete().
	 */
	public function testDelete() {
		$sql = $this->object->delete()
						->from('User')
						->where(array('name' => 'test', 'id' => 2))->getSql();
		$this->assertSame('DELETE FROM User WHERE (name = ? AND id = ?)', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::select
	 * @todo   Implement testSelect().
	 */
	public function testSelect() {
		$sql = $this->object->select(array('id', 'name'))
						->from('User')
						->where(array('name' => 'test', 'id' => 2))->getSql();
		$this->assertSame('SELECT id,name FROM User WHERE (name = ? AND id = ?)', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::select
	 * @todo   Implement testSelect().
	 */
	public function testSelect2() {
		$sql = $this->object->selectDistinct(array('id', 'name'))
						->from('User')
						->where(array('name' => 'test', 'id' => 2))->getSql();
		$this->assertSame('SELECT DISTINCT id,name FROM User WHERE (name = ? AND id = ?)', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::select
	 * @todo   Implement testSelect().
	 */
	public function testSelect3() {
		$sql = $this->object->select(array('id', 'name'))
						->from('User')
						->where(array('name' => 'test', 'id' => 2))
						->andWhere(array('item' => 'itemName'))->getSql();
		$this->assertSame('SELECT id,name FROM User WHERE (name = ? AND id = ?) AND (item = ?)', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::select
	 * @todo   Implement testSelect().
	 */
	public function testSelect4() {
		$sql = $this->object->select(array('id', 'name'))
						->from('User')
						->where(array('name' => 'test', 'id' => 2))
						->orWhere(array('item' => 'itemName'))->getSql();
		$this->assertSame('SELECT id,name FROM User WHERE (name = ? AND id = ?) OR (item = ?)', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::select
	 * @todo   Implement testSelect().
	 */
	public function testSelect5() {
		$sql = $this->object->select(array('id', 'name'))
						->from('User')
						->leftJoin('Item', array('User.id' => 'Item.id'))
						->where(array('name' => 'test', 'id' => 2))
						->getSql();
		$this->assertSame('SELECT id,name FROM User LEFT OUTER JOIN Item ON User.id = Item.id WHERE (name = ? AND id = ?)', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::select
	 * @todo   Implement testSelect().
	 */
	public function testSelect6() {
		$sql = $this->object->select(array('id', 'name'))
						->from('User')
						->innerJoin('Item', array('User.id' => 'Item.id'
													, 'User.name' => 'Item.name'))
						->where(array('name' => 'test', 'id' => 2))
						->getSql();
		$this->assertSame('SELECT id,name FROM User INNER JOIN Item ON User.id = Item.id AND User.name = Item.name WHERE (name = ? AND id = ?)', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::select
	 * @todo   Implement testSelect().
	 */
	public function testSelect7() {
		$sql = $this->object->select(array('id', 'name'))
						->from('User')
						->leftJoin('Item', array('User.id' => 'Item.id'
													, 'User.name' => 'Item.name'))
						->where(array('name' => 'test', 'id' => 2))
						->getSql();
		$this->assertSame('SELECT id,name FROM User LEFT OUTER JOIN Item ON User.id = Item.id AND User.name = Item.name WHERE (name = ? AND id = ?)', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::select
	 * @todo   Implement testSelect().
	 */
	public function testSelect8() {
		$sql = $this->object->select(array('id', 'name'))
						->from('User')
						->orderBy(array('id' => 'asc', 'name' => 'desc'))
						->getSql();
		$this->assertSame('SELECT id,name FROM User ORDER BY id asc,name desc', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::select
	 * @todo   Implement testSelect().
	 */
	public function testSelect9() {
		$sql = $this->object->select(array('id', 'name'))
						->from('User')
						->groupBy(array('id' , 'name'))
						->getSql();
		$this->assertSame('SELECT id,name FROM User GROUP BY id,name', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::select
	 * @todo   Implement testSelect().
	 */
	public function testSelect10() {
		$sql = $this->object->select(array('id', 'name'))
						->from('User')
						->having(array('id' => 1, 'name' => 'test'))
						->getSql();
		$this->assertSame('SELECT id,name FROM User HAVING (id = ? AND name = ?)', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::select
	 * @todo   Implement testSelect().
	 */
	public function testSelect11() {
		$sql = $this->object->select(array('id', 'name'))
						->from('User')
						->having(array('id' => 1, 'name' => 'test'))
						->andHaving(array('itemName' => 'name', 'itemId' => 1))
						->getSql();
		$this->assertSame('SELECT id,name FROM User HAVING (id = ? AND name = ?) AND (itemName = ? AND itemId = ?)', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::select
	 * @todo   Implement testSelect().
	 */
	public function testSelect12() {
		$sql = $this->object->select(array('id', 'name'))
						->from('User')
						->having(array('id' => 1, 'name' => 'test'))
						->orHaving(array('itemName' => 'name', 'itemId' => 1))
						->getSql();
		$this->assertSame('SELECT id,name FROM User HAVING (id = ? AND name = ?) OR (itemName = ? AND itemId = ?)', $sql);
	}


	/**
	 * @covers SSql\SQueryManager::update
	 * @todo   Implement testUpdate().
	 */
	public function testUpdate() {
		$sql = $this->object->update('User')
						->set(array('id' => 1, 'name' => 'test'))
						->getSql();
		$this->assertSame('UPDATE User SET id = ?,name = ?', $sql);
	}

	/**
	 * @covers SSql\SQueryManager::execute
	 * @todo   Implement testExecute().
	 */
	public function testExecute() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

}
